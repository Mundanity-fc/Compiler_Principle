# Encoding with UTF-8
# 词法分析器输入文档，三型文法产生式
# 该产生式应当模拟 Pascal 语法
# 关键字至少覆盖了条件语句、循环语句、函数等
# VAR
# identifier1, identifier2: integer;
# identifier3: real;
# identifier4: string;
# identifier5: boolean;
# identifier6: complex;
# function identifier0(identifier7: integer):integer;
#     var
#     identifier8: integer;
#     begin
#     for identifier8 := 10 to 1 do
#         begin
#             if identifier8 >= 0 then identifier8 := identifier8;
#             else
#                 begin
#                     identifier8 := identifier8;
#                 end;
#         end;
#     end;
#
# BEGIN
#     identifier1 := 0
#     identifier2 := 10
#     identifier3 := 0.314E+1
#     identifier6 := 9+2i
#     repeat
#         identifier1 := identifier + 1;
#     until identifier1 == 4;
#     while identifier2 >= 5 do
#     begin
#         identifier2 := identifier2 - 2;
#     end;
# END.

# 产生式，需要有 (K)eyword, (I)dentifier, (C)onst, (O)perator, (D)elimiter，其中，关键字可以作为保留标识符，于分析源码的时候再次判断
# 标识符判别
# 由字母或下划线开头
I -> <alphabet>I0 | _I1
# 可有一位字母，或者后跟字母、数字重复、或单独数字、字母一次
I0 -> ε | <alphabet>I0 | <number> I0 | <alphabet> | <number>
# 下划线开头后需跟一个字母，之后按上式规则
I1 -> <alphabet>I0

# 常量判别
# 必须由数字开头
C -> <number>C0
# 数字后跟数字、或小数点、或科学计数、或虚数、或结束
C0 -> <number>C0 | .C1 | eC3 | EC3 | i | ε
# 小数点后必须接一位数字
C1 -> <number>C2
# 小数点后一位数字结束后可继续、接科学计数、或虚数、或结束
C2 -> <number>C2 | eC3 | EC3 | i | ε
# 科学计数后可接纯数字或负号
C3 -> <number>C4 | -C5
# 科学计数第一位数字后可继续跟数字或结束
C4 -> <number>C4 | ε
# 科学计数的负号后至少跟一个数字，之后按上式规则
C5 -> <number>C4

# 操作符判别，无特殊
O -> +O1 | -O1 | *O1 | /O1 | >O1 | <O1 | =O1
O1 -> = | ε


# 界符判别，无特殊
D -> ( | ) | ; | .